# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scanner_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import re

def match_array(iterator,type):
    matches = []
    for x in iterator:
        matches.append([x,type])
    return matches

def sortFunc(x):
    return x[0].span()[0]+x[0].span()[1]*0.1

def format_tokens(tokens):
    final_tokens = []
    for token in tokens:
        if token[1] == 'Reserved word':
            final_tokens.append([token[0].group(2), token[0].group(2)])
        elif token[1] == 'Special Symbol':
            final_tokens.append([token[0].group(1), token[0].group(1)])
        else:
            final_tokens.append([token[0].group(1), token[1]])
    return final_tokens

def scan_to_tokens(lines):
    comment = re.sub("[{][^{}]*[}]", " ", lines)
    lines = comment.split('\n')
    tokens = []
    for line in lines:
        reserved_words_iterator = re.finditer(r"(\W|^)(read|if|then|else|end|repeat|until|write)(\W|$)", line)
        list_of_reserved_words_matches = match_array(reserved_words_iterator, 'Reserved word')

        identifiers_iterator = re.finditer(r"(\b(?!(?:read|if|then|else|end|repeat|until|write)\b)[a-zA-Z]+)", line)
        list_of_identifiers_matches = match_array(identifiers_iterator, 'Identifier')

        numbers_iterator = re.finditer('([0-9]+)', line)
        list_of_numbers_matches = match_array(numbers_iterator, 'Number')

        symbols_iterator = re.finditer('(:=|-|=|;|[+*/<>()])', line)
        list_of_symbols_matches = match_array(symbols_iterator, 'Special Symbol')

        list_of_reserved_words_matches.extend(list_of_identifiers_matches)
        list_of_reserved_words_matches.extend(list_of_numbers_matches)
        list_of_reserved_words_matches.extend(list_of_symbols_matches)
        list_of_reserved_words_matches.sort(key=sortFunc)
        tokens.extend(list_of_reserved_words_matches)

    final_tokens = format_tokens(tokens)
    return final_tokens
 ############Parser####################
import sys
import os
dirpath = os.getcwd()
os.environ["PATH"] += os.pathsep + dirpath + os.pathsep + 'D:\\programs\\graphviz-2.38\\release\\bin'
from graphviz import Digraph
g = Digraph('Output_graph', format='png') 
token = ''
index = 0
tokens = [[],[]]
def parser():
            global tokens
            input_file = "outputFile.txt"
            with open(input_file) as f:
                content = f.readlines()
                content = [x.strip() for x in content]
            for i in range(len(content)):
                index = content[i].find(',')
                tokens[0].append(content[i][:index - 1].strip("'"))
                tokens[1].append(content[i][index + 2:].strip("'"))
            get_token()
            stmt_seq()
            


def get_token():
            global token
            global index
            if index == len(tokens[0]):
                g.view()
                return
            if (tokens[1][index] == 'Identifier') or (tokens[1][index] == 'Number'):

                token = tokens[1][index]
                index += 1
            else:
                token = tokens[0][index]

                index += 1
            return

node='1'
nodes_list=[]
nodeID={}
flag=0
def MakeNode(given_token,ass):

            if (given_token == 'Identifier') or (given_token == 'Number'):
                given = tokens[0][index-1]
            else:
                given = given_token
                if given_token == ':=':
                    given = 'assign'


            global node
            node = chr(ord(node) + 1)
            global flag
            given+= '\n (' + str(flag) + ')'
            current_flag=flag
            flag +=1
            nodeID[current_flag] = given
            if given_token != ':=' and ass !=1:
                g.node(given)
            return current_flag

def child(parent,childd,flag):
            x=1
            if nodeID[parent][:6]=='assign' and flag==1:
                f1=nodeID[parent][:nodeID[parent].find('(')]
                f2=nodeID[parent][nodeID[parent].find('('):]
                nodeID[parent]=f1+nodeID[childd][:nodeID[childd].find('(')]+'\n'+f2
                g.node(nodeID[parent])
                return

            token_parent=nodeID[parent]
            token_child=nodeID[childd]
            g.edge(token_parent,token_child)


def match(expected_token):
            if expected_token==token:
                get_token()
            return
sub=0
def same_rank(element1,element2):
            global sub
            x=1
            if element2==0:
                return
            token_element1=nodeID[element1]
            token_element2 = nodeID[element2]
            s = Digraph('subgraph'+str(sub))
            sub+=1
            s.graph_attr.update(rank='same')
            s.node(token_element1,color='red')
            s.node(token_element2,color='red')
            g.edge(token_element1,token_element2)
            g.subgraph(s)

def stmt_seq():
            temp=statement()

            first=temp
            while token == ';':
                match(token)
                if (token != ';'):
                    newtemp=statement()
                    same_rank(temp,newtemp)
                    temp=newtemp
            return first

def statement():
            temp=0
            if (token=='if'):
                temp=if_stmt()
            elif token == 'repeat':
                temp =repeat_stmt()
            elif token == 'read':
                temp = read_stmt()
            elif token == 'write':
                temp = write_stmt()
            elif (index != len(tokens[0])) and (tokens[0][index] == ':='):
                temp = assign_stmt()
            return temp

def assign_stmt():
            newtemp=0
            temp=MakeNode(token,1)
            match(token)

            newtemp=MakeNode(token,0) # :=
            match(token)
            child(newtemp, temp,1)
            child(newtemp, exp(),0 )
            temp = newtemp
            return temp

def read_stmt():
            temp=MakeNode(token,0)
            match(token)
            child(temp,MakeNode(token,0),0 )
            match(token)
            return temp


def write_stmt():
            temp=MakeNode(token,0)
            match(token)
            child(temp, exp(),0 )
            return temp

def term():
            temp = factor()
            while (token == '*') or token =='/':
                newTemp = MakeNode(token,0)
                match(token)
                child(newTemp, temp,0 )
                child(newTemp, factor(),0 )
                temp = newTemp
            return temp



def simple_exp():
            temp = term()
            while (token == '+') or (token == '-'):
                newTemp = MakeNode(token,0)
                match(token)
                child(newTemp, temp,0 )
                child(newTemp, term(),0 )
                temp = newTemp
            return temp


def if_stmt():
            newTemp = MakeNode(token,0)
            match(token)
            child(newTemp, exp(),0 )
            match(token)
            child(newTemp, stmt_seq(),0 )
            if token == 'else':
                match(token)
                child(newTemp, stmt_seq(),0 )
                match(token)
                temp = newTemp
            elif token == 'end':
                match(token)
                temp = newTemp
            return temp


def repeat_stmt():
            newTemp = MakeNode(token,0)
            match(token)
            child(newTemp, stmt_seq(),0 )
            match(token)
            child(newTemp, exp(),0 )
            temp = newTemp
            return temp


def exp():
            temp = simple_exp()
            if (token == '<') or (token == '='):
                newTemp = MakeNode(token,0)
                match(token)
                child(newTemp, temp,0)
                child(newTemp, simple_exp(),0)
                temp = newTemp
            return temp


def factor():
            temp=0
            if token == '(':
                match(token)
                temp = exp()
                match(token) #')'
            elif token == 'Identifier':
                newTemp = MakeNode(token,0)
                match(token)
                temp = newTemp
            elif token == 'Number':
                newTemp = MakeNode(token,0)
                match(token)
                temp = newTemp

            return temp
        
 ############Parser####################
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(969, 760)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(600, 50, 300, 550))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(420, 570, 100, 30))
        self.pushButton.setObjectName("pushButton")
        self.pushButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton2.setGeometry(QtCore.QRect(420, 500, 100, 30))
        self.pushButton2.setObjectName("pushButton")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(40, 50, 300, 550))
        self.textEdit.setObjectName("textEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 969, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def output_tokens():
            lines = self.textEdit.toPlainText()
            text = scan_to_tokens(lines)
            for token in text:
                self.textBrowser_2.append(str(token))
            with open('outputFile.txt', 'w') as filehandle:
                for token in text:
                    token = str(token).strip('[ ]')
                    filehandle.write('%s\n' % token)
            parser()    
        def clear():
            self.textBrowser_2.clear()

        self.pushButton.clicked.connect(output_tokens)
        self.pushButton2.clicked.connect(clear)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Start"))
        self.pushButton2.setText(_translate("MainWindow", "Clear"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
